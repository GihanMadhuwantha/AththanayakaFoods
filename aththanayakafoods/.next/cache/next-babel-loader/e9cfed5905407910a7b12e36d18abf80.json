{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Users from '../../../models/userModel';\nimport valid from '../../../utils/valid';\nimport bcrypt from 'bcrypt';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      await register(req, res);\n      break;\n  }\n});\nconst register = async (req, res) => {\n  try {\n    const {\n      name,\n      email,\n      password,\n      cf_password\n    } = req.body;\n    const errMsg = valid(name, email, password, cf_password);\n    if (errMsg) return res.status(400).json({\n      err: errMsg\n    });\n    const user = await Users.findOne({\n      email\n    });\n    if (user) return res.status(400).json({\n      err: 'This email already exists.'\n    });\n    const passwordHash = await bcrypt.hash(password, 12);\n    const newUser = new Users({\n      name,\n      email,\n      password: passwordHash,\n      cf_password\n    });\n    await newUser.save();\n    res.json({\n      msg: \"Register Success!\"\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"names":["connectDB","Users","valid","bcrypt","req","res","method","register","name","email","password","cf_password","body","errMsg","status","json","err","user","findOne","passwordHash","hash","newUser","save","msg","message"],"sources":["C:/Users/gihanmadhuwantha/Desktop/system_Development/AththanayakaFoods/aththanayakafoods/pages/api/auth/register.js"],"sourcesContent":["import connectDB from '../../../utils/connectDB'\r\nimport Users from '../../../models/userModel'\r\nimport valid from '../../../utils/valid'\r\nimport bcrypt from 'bcrypt'\r\nconnectDB()\r\n\r\nexport default async (req, res) => {\r\n    switch(req.method){\r\n        case \"POST\":\r\n            await register(req, res)\r\n            break;\r\n    }\r\n}\r\nconst register = async (req, res) => {\r\n    try{\r\n        const { name, email, password, cf_password } = req.body\r\n\r\n        const errMsg = valid(name, email, password, cf_password)\r\n        if(errMsg) return res.status(400).json({err: errMsg})\r\n\r\n        const user = await Users.findOne({ email })\r\n        if(user) return res.status(400).json({err: 'This email already exists.'})\r\n\r\n        const passwordHash = await bcrypt.hash(password, 12)\r\n\r\n        const newUser = new Users({ \r\n            name, email, password: passwordHash, cf_password  \r\n        })\r\n\r\n        await newUser.save()\r\n        res.json({msg: \"Register Success!\"})\r\n\r\n    }catch(err){\r\n        return res.status(500).json({err: err.message})\r\n    }\r\n}"],"mappings":"AAAA,OAAOA,SAAS,MAAM,0BAA0B;AAChD,OAAOC,KAAK,MAAM,2BAA2B;AAC7C,OAAOC,KAAK,MAAM,sBAAsB;AACxC,OAAOC,MAAM,MAAM,QAAQ;AAC3BH,SAAS,EAAE;AAEX,gBAAe,OAAOI,GAAG,EAAEC,GAAG,KAAK;EAC/B,QAAOD,GAAG,CAACE,MAAM;IACb,KAAK,MAAM;MACP,MAAMC,QAAQ,CAACH,GAAG,EAAEC,GAAG,CAAC;MACxB;EAAM;AAElB,CAAC;AACD,MAAME,QAAQ,GAAG,OAAOH,GAAG,EAAEC,GAAG,KAAK;EACjC,IAAG;IACC,MAAM;MAAEG,IAAI;MAAEC,KAAK;MAAEC,QAAQ;MAAEC;IAAY,CAAC,GAAGP,GAAG,CAACQ,IAAI;IAEvD,MAAMC,MAAM,GAAGX,KAAK,CAACM,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,WAAW,CAAC;IACxD,IAAGE,MAAM,EAAE,OAAOR,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAACC,GAAG,EAAEH;IAAM,CAAC,CAAC;IAErD,MAAMI,IAAI,GAAG,MAAMhB,KAAK,CAACiB,OAAO,CAAC;MAAET;IAAM,CAAC,CAAC;IAC3C,IAAGQ,IAAI,EAAE,OAAOZ,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAACC,GAAG,EAAE;IAA4B,CAAC,CAAC;IAEzE,MAAMG,YAAY,GAAG,MAAMhB,MAAM,CAACiB,IAAI,CAACV,QAAQ,EAAE,EAAE,CAAC;IAEpD,MAAMW,OAAO,GAAG,IAAIpB,KAAK,CAAC;MACtBO,IAAI;MAAEC,KAAK;MAAEC,QAAQ,EAAES,YAAY;MAAER;IACzC,CAAC,CAAC;IAEF,MAAMU,OAAO,CAACC,IAAI,EAAE;IACpBjB,GAAG,CAACU,IAAI,CAAC;MAACQ,GAAG,EAAE;IAAmB,CAAC,CAAC;EAExC,CAAC,QAAMP,GAAG,EAAC;IACP,OAAOX,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAACC,GAAG,EAAEA,GAAG,CAACQ;IAAO,CAAC,CAAC;EACnD;AACJ,CAAC"},"metadata":{},"sourceType":"module"}