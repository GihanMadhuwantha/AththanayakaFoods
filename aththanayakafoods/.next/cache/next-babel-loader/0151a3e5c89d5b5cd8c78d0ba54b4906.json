{"ast":null,"code":"import connectDB from '../../../../utils/connectDB';\nimport Orders from '../../../../models/orderModel';\nimport auth from '../../../../middleware/auth';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"PATCH\":\n      await deliveredOrder(req, res);\n      break;\n  }\n});\nconst deliveredOrder = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin') return res.status(400).json({\n      err: 'Authentication is not valid.'\n    });\n    const {\n      id\n    } = req.query;\n    const order = await Orders.findOne({\n      _id: id\n    });\n    if (order.paid) {\n      await Orders.findOneAndUpdate({\n        _id: id\n      }, {\n        delivered: true\n      });\n      res.json({\n        msg: 'Updated success!',\n        result: {\n          paid: true,\n          dateOfPayment: order.dateOfPayment,\n          method: order.method,\n          delivered: true\n        }\n      });\n    } else {\n      await Orders.findOneAndUpdate({\n        _id: id\n      }, {\n        paid: true,\n        dateOfPayment: new Date().toISOString(),\n        method: 'Receive Cash',\n        delivered: true\n      });\n      res.json({\n        msg: 'Updated success!',\n        result: {\n          paid: true,\n          dateOfPayment: new Date().toISOString(),\n          method: 'Receive Cash',\n          delivered: true\n        }\n      });\n    }\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"names":["connectDB","Orders","auth","req","res","method","deliveredOrder","result","role","status","json","err","id","query","order","findOne","_id","paid","findOneAndUpdate","delivered","msg","dateOfPayment","Date","toISOString","message"],"sources":["C:/Users/gihanmadhuwantha/Desktop/system_Development/AththanayakaFoods/aththanayakafoods/pages/api/order/delivered/[id].js"],"sourcesContent":["import connectDB from '../../../../utils/connectDB'\r\nimport Orders from '../../../../models/orderModel'\r\nimport auth from '../../../../middleware/auth'\r\n\r\nconnectDB()\r\n\r\nexport default async (req, res) => {\r\n    switch(req.method){\r\n        case \"PATCH\":\r\n            await deliveredOrder(req, res)\r\n            break;\r\n    }\r\n}\r\n\r\nconst deliveredOrder = async(req, res) => {\r\n    try {\r\n        const result = await auth(req, res)\r\n        if(result.role !== 'admin')\r\n        return res.status(400).json({err: 'Authentication is not valid.'})\r\n        const {id} = req.query\r\n\r\n\r\n        const order = await Orders.findOne({_id: id})\r\n        if(order.paid){\r\n            await Orders.findOneAndUpdate({_id: id}, {delivered: true})\r\n    \r\n            res.json({\r\n                msg: 'Updated success!',\r\n                result: {\r\n                    paid: true, \r\n                    dateOfPayment: order.dateOfPayment, \r\n                    method: order.method, \r\n                     delivered: true\r\n                }\r\n            })\r\n        }else{\r\n            await Orders.findOneAndUpdate({_id: id}, {\r\n                paid: true, dateOfPayment: new Date().toISOString(), \r\n                method: 'Receive Cash', delivered: true\r\n            })\r\n    \r\n            res.json({\r\n                msg: 'Updated success!',\r\n                result: {\r\n                    paid: true, \r\n                    dateOfPayment: new Date().toISOString(), \r\n                    method: 'Receive Cash', \r\n                    delivered: true\r\n                }\r\n            })\r\n        }\r\n        \r\n    } catch (err) {\r\n        return res.status(500).json({err: err.message})\r\n    }\r\n}"],"mappings":"AAAA,OAAOA,SAAS,MAAM,6BAA6B;AACnD,OAAOC,MAAM,MAAM,+BAA+B;AAClD,OAAOC,IAAI,MAAM,6BAA6B;AAE9CF,SAAS,EAAE;AAEX,gBAAe,OAAOG,GAAG,EAAEC,GAAG,KAAK;EAC/B,QAAOD,GAAG,CAACE,MAAM;IACb,KAAK,OAAO;MACR,MAAMC,cAAc,CAACH,GAAG,EAAEC,GAAG,CAAC;MAC9B;EAAM;AAElB,CAAC;AAED,MAAME,cAAc,GAAG,OAAMH,GAAG,EAAEC,GAAG,KAAK;EACtC,IAAI;IACA,MAAMG,MAAM,GAAG,MAAML,IAAI,CAACC,GAAG,EAAEC,GAAG,CAAC;IACnC,IAAGG,MAAM,CAACC,IAAI,KAAK,OAAO,EAC1B,OAAOJ,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAACC,GAAG,EAAE;IAA8B,CAAC,CAAC;IAClE,MAAM;MAACC;IAAE,CAAC,GAAGT,GAAG,CAACU,KAAK;IAGtB,MAAMC,KAAK,GAAG,MAAMb,MAAM,CAACc,OAAO,CAAC;MAACC,GAAG,EAAEJ;IAAE,CAAC,CAAC;IAC7C,IAAGE,KAAK,CAACG,IAAI,EAAC;MACV,MAAMhB,MAAM,CAACiB,gBAAgB,CAAC;QAACF,GAAG,EAAEJ;MAAE,CAAC,EAAE;QAACO,SAAS,EAAE;MAAI,CAAC,CAAC;MAE3Df,GAAG,CAACM,IAAI,CAAC;QACLU,GAAG,EAAE,kBAAkB;QACvBb,MAAM,EAAE;UACJU,IAAI,EAAE,IAAI;UACVI,aAAa,EAAEP,KAAK,CAACO,aAAa;UAClChB,MAAM,EAAES,KAAK,CAACT,MAAM;UACnBc,SAAS,EAAE;QAChB;MACJ,CAAC,CAAC;IACN,CAAC,MAAI;MACD,MAAMlB,MAAM,CAACiB,gBAAgB,CAAC;QAACF,GAAG,EAAEJ;MAAE,CAAC,EAAE;QACrCK,IAAI,EAAE,IAAI;QAAEI,aAAa,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;QACnDlB,MAAM,EAAE,cAAc;QAAEc,SAAS,EAAE;MACvC,CAAC,CAAC;MAEFf,GAAG,CAACM,IAAI,CAAC;QACLU,GAAG,EAAE,kBAAkB;QACvBb,MAAM,EAAE;UACJU,IAAI,EAAE,IAAI;UACVI,aAAa,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;UACvClB,MAAM,EAAE,cAAc;UACtBc,SAAS,EAAE;QACf;MACJ,CAAC,CAAC;IACN;EAEJ,CAAC,CAAC,OAAOR,GAAG,EAAE;IACV,OAAOP,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAACC,GAAG,EAAEA,GAAG,CAACa;IAAO,CAAC,CAAC;EACnD;AACJ,CAAC"},"metadata":{},"sourceType":"module"}