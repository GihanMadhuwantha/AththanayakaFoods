{"ast":null,"code":"/* import connectDB from '../../../utils/connectDB'\r\nimport Products from '../../../models/productModel'\r\nimport auth from '../../../middleware/auth'\r\n\r\nconnectDB()\r\nexport default async(req,res)=>{\r\n switch(req.method){\r\n    case \"GET\":\r\n        await getProducts(req,res)\r\n        break;\r\n        case \"POST\":\r\n         await createProduct(req, res)\r\n         break;\r\n\r\n }\r\n class APIfeatures {\r\n    constructor(query, queryString){\r\n        this.query = query;\r\n        this.queryString = queryString;\r\n    }\r\n    filtering(){\r\n        const queryObj = {...this.queryString}\r\n\r\n        const excludeFields = ['page', 'sort', 'limit']\r\n        excludeFields.forEach(el => delete(queryObj[el]))\r\n\r\n        if(queryObj.category !== 'all')\r\n            this.query.find({category: queryObj.category})\r\n        if(queryObj.title !== 'all')\r\n            this.query.find({title: {$regex: queryObj.title}})\r\n\r\n        this.query.find()\r\n        return this;\r\n    }\r\n\r\n    sorting(){\r\n        if(this.queryString.sort){\r\n            const sortBy = this.queryString.sort.split(',').join('')\r\n            this.query = this.query.sort(sortBy)\r\n        }else{\r\n            this.query = this.query.sort('-createdAt')\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    paginating(){\r\n        const page = this.queryString.page * 1 || 1\r\n        const limit = this.queryString.limit * 1 || 6\r\n        const skip = (page - 1) * limit;\r\n        this.query = this.query.skip(skip).limit(limit)\r\n        return this;\r\n    }\r\n}\r\n\r\n}\r\nconst getProducts= async(req,res)=>{\r\n try {\r\n    const features = new APIfeatures(Products.find(), req.query)\r\n        .filtering().sorting().paginating()\r\n\r\n        const products = await features.query\r\n    \r\n   // const products=await Products.find()\r\n    res.json({\r\n        status:'success',\r\n        result:products.length,\r\n        products})\r\n } catch (err) {\r\n    return res.status(500).json({err:err.message })\r\n }\r\n}\r\nconst createProduct = async (req, res) => {\r\n   try {\r\n       const result = await auth(req, res)\r\n       if(result.role !== 'admin') return res.status(400).json({err: 'Authentication is not valid.'})\r\n\r\n       const {title, price, inStock, description, content, category, images} = req.body\r\n\r\n       if(!title || !price || !inStock || !description || !content || category === 'all' || images.length === 0)\r\n       return res.status(400).json({err: 'Please add all the fields.'})\r\n\r\n\r\n       const newProduct = new Products({\r\n           title: title.toLowerCase(), price, inStock, description, content, category, images\r\n       })\r\n\r\n       await newProduct.save()\r\n\r\n       res.json({msg: 'Success! Created a new product'})\r\n\r\n   } catch (err) {\r\n       return res.status(500).json({err: err.message})\r\n   }\r\n} */","map":{"version":3,"names":[],"sources":["C:/Users/gihanmadhuwantha/Desktop/system_Development/AththanayakaFoods/aththanayakafoods/pages/api/product/index.js"],"sourcesContent":["/* import connectDB from '../../../utils/connectDB'\r\nimport Products from '../../../models/productModel'\r\nimport auth from '../../../middleware/auth'\r\n\r\nconnectDB()\r\nexport default async(req,res)=>{\r\n switch(req.method){\r\n    case \"GET\":\r\n        await getProducts(req,res)\r\n        break;\r\n        case \"POST\":\r\n         await createProduct(req, res)\r\n         break;\r\n\r\n }\r\n class APIfeatures {\r\n    constructor(query, queryString){\r\n        this.query = query;\r\n        this.queryString = queryString;\r\n    }\r\n    filtering(){\r\n        const queryObj = {...this.queryString}\r\n\r\n        const excludeFields = ['page', 'sort', 'limit']\r\n        excludeFields.forEach(el => delete(queryObj[el]))\r\n\r\n        if(queryObj.category !== 'all')\r\n            this.query.find({category: queryObj.category})\r\n        if(queryObj.title !== 'all')\r\n            this.query.find({title: {$regex: queryObj.title}})\r\n\r\n        this.query.find()\r\n        return this;\r\n    }\r\n\r\n    sorting(){\r\n        if(this.queryString.sort){\r\n            const sortBy = this.queryString.sort.split(',').join('')\r\n            this.query = this.query.sort(sortBy)\r\n        }else{\r\n            this.query = this.query.sort('-createdAt')\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    paginating(){\r\n        const page = this.queryString.page * 1 || 1\r\n        const limit = this.queryString.limit * 1 || 6\r\n        const skip = (page - 1) * limit;\r\n        this.query = this.query.skip(skip).limit(limit)\r\n        return this;\r\n    }\r\n}\r\n\r\n}\r\nconst getProducts= async(req,res)=>{\r\n try {\r\n    const features = new APIfeatures(Products.find(), req.query)\r\n        .filtering().sorting().paginating()\r\n\r\n        const products = await features.query\r\n    \r\n   // const products=await Products.find()\r\n    res.json({\r\n        status:'success',\r\n        result:products.length,\r\n        products})\r\n } catch (err) {\r\n    return res.status(500).json({err:err.message })\r\n }\r\n}\r\nconst createProduct = async (req, res) => {\r\n   try {\r\n       const result = await auth(req, res)\r\n       if(result.role !== 'admin') return res.status(400).json({err: 'Authentication is not valid.'})\r\n\r\n       const {title, price, inStock, description, content, category, images} = req.body\r\n\r\n       if(!title || !price || !inStock || !description || !content || category === 'all' || images.length === 0)\r\n       return res.status(400).json({err: 'Please add all the fields.'})\r\n\r\n\r\n       const newProduct = new Products({\r\n           title: title.toLowerCase(), price, inStock, description, content, category, images\r\n       })\r\n\r\n       await newProduct.save()\r\n\r\n       res.json({msg: 'Success! Created a new product'})\r\n\r\n   } catch (err) {\r\n       return res.status(500).json({err: err.message})\r\n   }\r\n} */"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}